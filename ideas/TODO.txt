更新日志
5/2
1）	购买装备策略命名为：WasteMoneyStrategy
2）	购买装备策略中，“保留两个守卫“调整为”保留x个守卫“，x可以根据实际情况调整。
3）	购买装备策略完成

5/3
1）	行动策略命名为：CentralStealthStrategy
2）	行动策略实现完成，并初步测试无误
3）	完成了函数5

AI整体框架描述

看视频得到的一些经验
如果自己某回合掉血了，那么身边肯定有一个玩家
如果一个玩家在行走之后再某个位置停留超过20回合，或者小于10回合，那么就是玩家

夜间似乎是可以见人就杀的。如果被杀的是玩家那么很好，很可能就干掉了，如果是村民，可以回血，还不一定会被发现

游戏逻辑似乎有一个bug，有的时候村民可能会停在一个地方一直不动了。

感觉现在很多玩家都很含蓄的，白天不喜欢扔炸弹，导致有人明显暴露自己后不会被干掉

好像一般游戏结束的时候也就过了4到5回合，也就是说有人几乎是不会死的。可能很难有足够的时间来找到规律然后再做分析。

一些经常用到因此需要单独实现的函数
1）函数1：写一个查询函数，判断自己是否能在一次击杀内取得胜利（比如说此时自己的分数是12，连杀数是3，那么再杀一个人，就是12 + 3 = 15，此时函数就该返回为真）

2）函数2：写一个查询函数，返回一个坐标距离其他单位（非炸弹！！！）的最近距离，输入是vec2坐标，输出为float距离值。

3）函数3：实现一个类，能够记录HP的变化，每次调用时能够查询到自己上回合是否受到了炸弹攻击、普通攻击，注意灼烧自动掉血以及普通攻击的回血特性。

4）函数4：实现一个类，能够记录过去行动，能够判断当前状态下，执行某一行动会不会暴露自己的身份。（判断方式为当前行为是否能够与村民行为区别）

5）函数5：判断是否为白天。（完成） bool isNight(const PlayerSight & sight);
如何判断谁是玩家？
1）根据炸弹来判断是否是玩家，如果视野中出现一个炸弹，并且炸弹的单位编号之前没有出现过，可以根据弹道推算出玩家所在地。

2）如果我此回合被普通攻击了，那么上回合距离我大于4，本回合距离我小于4的单位是玩家。

3）如果一个原本在行进中的单位在一个地方停停留时间超过20回合或者停留时间小于10回合，那么就是玩家。

4）如果一个单位突然改变行动方向，且原方向与现方向夹角之间没有障碍物（排除为了躲避障碍物而发生转向的情况），则该单位为玩家。

进攻以及行动策略
行动策略：（完成）
实现by wxs
初步测试通过
平时在地图的中心附近按照村民的行动方式徘徊，（原因在于那里是一个类似交通枢纽的地方，如果有单位想从上半场到下半场或者从下半场到上半场，都需要经过那里。好比说，在五道口偷东西不容易被发现，在地图中心杀人也不容易被别人认出来。）
这种行动策略是比较被动的，并不是去主动攻击，而是守株待兔，等别人来。因此该策略的优先级应当低于其他主动型的策略类。
行动策略实现起来很简单，参考sdk\strategy文件夹下stealth_strategy.cpp以及stealth_strategy.h来实现即可，功能基本如此，稍微改一下活动范围即可。

普通攻击策略：
如果是在白天，如果遇到一个路过的玩家，该杀还是不该杀呢？首先，如果自己血量小于等于35，那么如果一刀干不死，很可能被对方反手一刀灭掉，另外还要承担万一成功，被发现后炸成筛子的可能性，不如苟着。如果血量大于35，杀掉他，起码能够得到一些分数。但还不是万全之策。最稳妥的办法当然还是白天不要轻举妄动，晚上再杀人，但是这样一来晚上可能无法回复足够的HP，二来过分保守，得分太慢，会输掉比赛，需要权衡。
策略需要判断一个单位是不是玩家，因此此策略属于“带有记忆的”策略。由于此功能较为复杂，并且需要用到的场合很多，所以采取“类外维护”的方式，需要在“普通攻击策略类”当中添加一个私有变量来储存此“记忆类”的指针，以便函数中使用。
实现方式请参考sdk\strategy文件夹下focus_attack_strategy.h与focus_attack_strategy.cpp文件。
如果（普通攻击冷却时间未到）
	直接返回
如果（在夜间）
{
	如果（可攻击范围内有单位存在）
	{
		攻击它
	}
}
否则 如果（可攻击范围内有单位存在）
{
	如果(HP>75)//75的意义在于，攻击对手+15，即便对方扔炸弹也炸不死了
	{
		找出自己攻击范围内的所有玩家
		//这里需要判断一个单位是不是玩家，因此此策略属于“带有记忆的”策略。
		挑选出一个最安全的目标攻击（实现可以调用函数2）
		//是否安全可以参考它距离最近单位的距离，也就是说，如果可能可能攻击它的单位有多个，那么其他玩家就无法根据其尸体判断出哪个单位是玩家。
	}
	如果（HP<35）
	{
		找出自己攻击范围内所有村民
		挑出一个最安全的目标攻击（实现可调用函数2）
	}
}

扔炸弹的策略：
扔炸弹是一件高风险高回报的事情，基本可以将对手置于死地，但是会有相当大的几率被发现。
白天理论上来讲最好不要扔炸弹，因为一旦扔了炸弹意味着所有人都可以看到，很可能立马就会被搞死，然而如果白天不扔炸弹，得分速度太慢，很难获胜，所以折衷一些，可以等“炸弹潮”平息下来以后，大家手上都没有炸弹了，或者还有炸弹但不想暴露自我的时候，再去使用，并且使用前先最好移动到两格内有单位的位置，或者如果有条件，在身边安放一个守卫，这样别人就无法确定炸弹的来源，从而降低被攻击的概率。
至于晚上，似乎没有特别需要扔炸弹的场合，唯一的例外是自己被攻击了的时候，如果感到生命受到了威胁，不妨送一发炸弹，一滴入魂。
另外需要注意，这里的策略涉及到多回合间的相互配合，需要“记忆”机制。这个类中的记忆机制分为两部分，第一是记忆过去x回合内是否有人扔过炸弹，第二是记忆已识别的玩家。
对于前者，由于其“记忆”逻辑相对独立，不具有像杀敌数量这种信息的复用价值，因此适合采取“如何编写AI”中“预置AI框架结构的缺陷”的第二种记忆实现机制。
后者需要广泛使用，因此需要采取第一种方式单独实现。
实现方式请参考sdk\strategy文件夹下focus_attack_strategy.h与focus_attack_strategy.cpp文件。
如果（炸弹冷却时间未到）
	直接返回
如果（当前为黑夜）
{
	如果
	如果（本回合受到了普通攻击）//调用函数3实现
	{
		往自己身上投一个炸弹//普通攻击距离至少为4，三回合逃跑距离为6，也就是说如果立即使用炸弹，敌人逃跑的概率非常低。而且三回合内炸弹都在自己身上，其他玩家除非在自己的视野内，无法发现炸弹的存在，另一方面，如果在视野内，很可能就被炸死了。
	}
}
否则
{
	如果（有人扔过炸弹，并且x回合内没有人再扔炸弹，且身上有炸弹）
//x暂且设为一个私有变量，具体x的取值还需要后期调试
	{
		如果有守卫，在自己身上安放一个守卫//不需考虑购买，因为默认有了钱就买，身上没有说明没钱。
		朝一个玩家扔炸弹（没有就算了）
		朝一个方向逃跑//这样很可能别人会误认为是那个守卫扔了炸弹
	}
}

购买装备策略WasteMoneyStrategy（完成）
实现by wxs
初步测试通过
留着钱没用，死了还要扣钱，不如“人生得意须尽欢”，有钱就拿来买装备，除了增加资源调配失误带来的不便，没有其他坏处。
暂定逻辑如下：没有哪种装备就先买哪种，如果都有就在保证有x个守卫的前提下，优先购买炸弹，原因在于，根据前边所属的逻辑，使用守卫一定意味着马上将要使用炸弹，但是使用炸弹并不意味着要使用守卫，因此守卫的需求量小于炸弹的需求量。
实现方式请参考sdk\strategy文件夹下blind_item_strategy.h与blind_item_strategy.cpp文件。

身份记忆的实现
游戏非常重要的一点是记住谁（单位编号）是玩家，谁是村民。
由于夜间视野非常有限，因此，身份记忆主要考虑白天的情况。
身份记忆最核心的数据结构就是一个结构体的数组，每个结构体第一项是单位编号，第二项是一个bool量，描述是否为玩家。
重点在于这个数组的维护，需要考虑到昼夜交替、尸体、炸弹等等情况，可能会比较复杂。
需要该类提供如下接口：
1）	将某个编号的单位置为玩家。
2）	查询某个编号的单位是否为玩家。
身份记忆不要求尽善尽美，只需要在绝大多数情况下能够准确反映实际情况即可。
